{"version":3,"sources":["components/tournaments/codes.component.jsx","components/tournaments/tournaments.component.jsx","App.js","serviceWorker.js","index.js"],"names":["LinkentreSkuYFirebase","sku","click","className","Button","variant","onClick","SkuTournaments","getCode","a","skuRef","firebase","database","ref","torneosRef","once","then","snapshot","val","torneosData","foundPendings","Object","values","filter","elemento","status","setState","code","numero","findIndex","child","update","state","tournaments","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","data","keys","map","element","push","alt","src","this","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sXAoBeA,EAbe,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,MAAR,OAC5B,yBAAKC,UAAU,OACb,gCAAMF,GACN,kBAACG,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACPJ,EAAMD,KAHV,cCuGWM,G,wDAxGb,aAAe,IAAD,8BACZ,gBA+BFC,QAhCc,uCAgCJ,WAAOP,GAAP,uBAAAQ,EAAA,6DACJC,EAASC,IAASC,WAAWC,IAAI,YAAcZ,GAC/Ca,EAAaH,IAASC,WAAWC,IAAI,YAFjC,SAGgBC,EACrBC,KAAK,SACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,MAAMjB,MAL7B,cAGJkB,EAHI,OAMJC,EAAgBC,OAAOC,OAAOH,GAAaI,QAC7C,SAACC,GAAD,MAAkC,YAApBA,EAASC,UAEzB,EAAKC,SAAS,CAAEC,KAAMP,EAAc,KAEhCQ,EAASP,OAAOC,OAAOH,GAAaU,WAAU,SAAUL,GAC1D,OAAOA,IAAaJ,EAAc,MAZ5B,UAeFV,EAAOoB,MAAMF,GAAQG,OAAO,CAAEN,OAAQ,SAfpC,4CAhCI,sDAEZ,EAAKO,MAAQ,CACXC,YAAa,GACbN,KAAM,IAJI,E,gEAOO,IAAD,OAYlBhB,IAASuB,cAXY,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,aACnBC,MAAO,0CACPC,cAAe,iBAIjB,IAAI5B,EAAaH,IAASC,WAAWC,IAAI,YACrC8B,EAAO,GACX7B,EACGC,KAAK,SACLC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,MAAK,SAACf,GAAD,OACJoB,OAAOuB,KAAK3C,GAAK4C,KAAI,SAACC,GACpB,OAAOH,EAAKI,KAAKD,SAGpB9B,MAAK,kBAAM,EAAKU,SAAS,CAAEO,YAAaU,S,+BAmBnC,IAAD,OACP,OACE,6BACE,yBACExC,UAAU,UACV6C,IAAI,UACJC,IAAI,iGAELC,KAAKlB,MAAMC,YACViB,KAAKlB,MAAMC,YAAYY,KAAI,SAAC5C,GAC1B,OACE,kBAAC,EAAD,CACEkD,IAAKlD,EACLA,IAAKA,EACLC,MAAO,EAAKM,QACZmB,KAAM,EAAKK,MAAML,UAKvB,8CAGDuB,KAAKlB,MAAML,KAAKA,KACf,yBAAKxB,UAAU,QACb,sDACA,4GAIA,gFACA,8DACA,gFACA,+DACiC+C,KAAKlB,MAAML,KAAKA,KADjD,2BAIA,gFACA,sFACA,gFACA,uIAIA,gFACA,8HAKA,U,GApGiByB,IAAMC,Y,MCIpBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7192e360.chunk.js","sourcesContent":["// Por cada sku\r\nimport React from \"react\";\r\nimport \"firebase/database\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\nimport \"./codes.styles.scss\";\r\nimport Button from \"react-bootstrap/Button\";\r\nconst LinkentreSkuYFirebase = ({ sku, click }) => (\r\n  <div className=\"sku\">\r\n    <h2> {sku}</h2>\r\n    <Button\r\n      variant=\"success\"\r\n      onClick={() => {\r\n        click(sku);\r\n      }}\r\n    >\r\n      Get Code\r\n    </Button>\r\n  </div>\r\n);\r\nexport default LinkentreSkuYFirebase;\r\n","// Me encargo de buscar el sku de los torneos activo\r\nimport React from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/database\";\r\nimport LinkToFirebase from \"./codes.component\";\r\nimport \"./tournaments.styles.scss\";\r\nclass SkuTournaments extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      tournaments: [],\r\n      code: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    var firebaseConfig = {\r\n      apiKey: \"AIzaSyBoR3To-c5lnRB74g5X4NxrX9WK6se_FVA\",\r\n      authDomain: \"codigostorneos-965ef.firebaseapp.com\",\r\n      databaseURL: \"https://codigostorneos-965ef.firebaseio.com\",\r\n      projectId: \"codigostorneos-965ef\",\r\n      storageBucket: \"codigostorneos-965ef.appspot.com\",\r\n      messagingSenderId: \"6329310884\",\r\n      appId: \"1:6329310884:web:7a6f872bd3f91fb4fc1031\",\r\n      measurementId: \"G-TC89PSB289\",\r\n    };\r\n    // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    var torneosRef = firebase.database().ref(\"/torneos\");\r\n    var data = [];\r\n    torneosRef\r\n      .once(\"value\")\r\n      .then((snapshot) => snapshot.val())\r\n      .then((sku) =>\r\n        Object.keys(sku).map((element) => {\r\n          return data.push(element);\r\n        })\r\n      )\r\n      .then(() => this.setState({ tournaments: data }));\r\n  }\r\n  getCode = async (sku) => {\r\n    var skuRef = firebase.database().ref(\"/torneos/\" + sku);\r\n    var torneosRef = firebase.database().ref(\"/torneos\");\r\n    var torneosData = await torneosRef\r\n      .once(\"value\")\r\n      .then((snapshot) => snapshot.val()[sku]);\r\n    var foundPendings = Object.values(torneosData).filter(\r\n      (elemento) => elemento.status === \"pending\"\r\n    );\r\n    this.setState({ code: foundPendings[0] });\r\n\r\n    var numero = Object.values(torneosData).findIndex(function (elemento) {\r\n      return elemento === foundPendings[0];\r\n    });\r\n\r\n    await skuRef.child(numero).update({ status: \"used\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img\r\n          className=\"portada\"\r\n          alt=\"portada\"\r\n          src=\"https://cdn.shopify.com/s/files/1/0365/0686/1705/files/foto_perfil_fb_1163x.png?v=1585183065\"\r\n        ></img>\r\n        {this.state.tournaments ? (\r\n          this.state.tournaments.map((sku) => {\r\n            return (\r\n              <LinkToFirebase\r\n                key={sku}\r\n                sku={sku}\r\n                click={this.getCode}\r\n                code={this.state.code}\r\n              ></LinkToFirebase>\r\n            );\r\n          })\r\n        ) : (\r\n          <h1>No hay torneos</h1>\r\n        )}\r\n\r\n        {this.state.code.code ? (\r\n          <div className=\"code\">\r\n            <p>Pasos para inscribirte.</p>\r\n            <p>\r\n              1. Ingresa en (battlefy.com/houseplay) selecciona tu torneo y\r\n              presiona \"Join\"\r\n            </p>\r\n            <p>-------------------------------------------------</p>\r\n            <p>2. Crea una cuenta de BattleFy.</p>\r\n            <p>-------------------------------------------------</p>\r\n            <p>\r\n              3. Coloca el siguiente código {this.state.code.code} donde dice\r\n              \"Join Code\"\r\n            </p>\r\n            <p>-------------------------------------------------</p>\r\n            <p>4. Rellena el formulario y únete al grupo de Discord</p>\r\n            <p>-------------------------------------------------</p>\r\n            <p>\r\n              5. Ya inscrito, se coordinara vía BattleFy y Discord las fechas y\r\n              oponentes que deberás enfrentar.\r\n            </p>\r\n            <p>-------------------------------------------------</p>\r\n            <p>\r\n              6. ¿Has sido el campeón? ¡Te contactaremos enseguida para que\r\n              recibas tu gran premio!\r\n            </p>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SkuTournaments;\r\n","import React from \"react\";\r\nimport SkuTournaments from \"./components/tournaments/tournaments.component\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <SkuTournaments></SkuTournaments>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}